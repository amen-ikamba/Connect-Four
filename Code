import pygame
import sys

# Constants
ROW_COUNT = 6
COLUMN_COUNT = 7
BLUE = (0, 0, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
YELLOW = (255, 255, 0)
SQUARESIZE = 100
RADIUS = int(SQUARESIZE / 2 - 5)

class Checker:
    def __init__(self, row, col, color):
        self.row = row
        self.col = col
        self.color = color

    def draw(self, screen):
        pygame.draw.rect(screen, BLACK, (self.col * SQUARESIZE, (ROW_COUNT - self.row) * SQUARESIZE, SQUARESIZE, SQUARESIZE))
        pygame.draw.circle(screen, self.color, (int(self.col * SQUARESIZE + SQUARESIZE / 2), int((ROW_COUNT - self.row) * SQUARESIZE + SQUARESIZE / 2)), RADIUS)

class ConnectFour:
    def __init__(self):
        self.board = [[0]*COLUMN_COUNT for _ in range(ROW_COUNT)]
        self.turn = 0  # Player 1 starts

    def drop_checker(self, col):
        for row in range(ROW_COUNT):
            if self.board[row][col] == 0:
                self.board[row][col] = self.turn + 1
                return row, col
        return None, None

    def switch_turn(self):
        self.turn = (self.turn + 1) % 2


    def check_winner(self, row, col):
      # Check horizontally
      for c in range(COLUMN_COUNT - 3):
          if self.board[row][c] == self.turn + 1 and \
             self.board[row][c+1] == self.turn + 1 and \
             self.board[row][c+2] == self.turn + 1 and \
             self.board[row][c+3] == self.turn + 1:
              return True

      # Check vertically
      for r in range(ROW_COUNT - 3):
          if self.board[r][col] == self.turn + 1 and \
             self.board[r+1][col] == self.turn + 1 and \
             self.board[r+2][col] == self.turn + 1 and \
             self.board[r+3][col] == self.turn + 1:
              return True

      # Check positively sloped diagonals
      for r in range(ROW_COUNT - 3):
          for c in range(COLUMN_COUNT - 3):
              if self.board[r][c] == self.turn + 1 and \
                 self.board[r+1][c+1] == self.turn + 1 and \
                 self.board[r+2][c+2] == self.turn + 1 and \
                 self.board[r+3][c+3] == self.turn + 1:
                  return True

      # Check negatively sloped diagonals
      for r in range(ROW_COUNT - 3):
          for c in range(3, COLUMN_COUNT):
              if self.board[r][c] == self.turn + 1 and \
                 self.board[r+1][c-1] == self.turn + 1 and \
                 self.board[r+2][c-2] == self.turn + 1 and \
                 self.board[r+3][c-3] == self.turn + 1:
                  return True

      # Check for three checkers of the same color below
      if row <= ROW_COUNT - 4 and \
         self.board[row+1][col] == self.turn + 1 and \
         self.board[row+2][col] == self.turn + 1 and \
         self.board[row+3][col] == self.turn + 1:
          return True

      return False

class ConnectFourGame:
    def __init__(self):
        self.game = ConnectFour()
        self.width = COLUMN_COUNT * SQUARESIZE
        self.height = (ROW_COUNT+1) * SQUARESIZE
        self.size = (self.width, self.height)
        self.screen = pygame.display.set_mode(self.size)
        pygame.display.set_caption("Connect Four")
        self.font = pygame.font.SysFont("comicsansms", 50)

    def run(self):
        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()

                if event.type == pygame.MOUSEBUTTONDOWN:
                    posx = event.pos[0]
                    col = int(posx // SQUARESIZE)
                    row, col = self.game.drop_checker(col)
                    if row is not None and col is not None:
                        if self.game.check_winner(row, col):
                            print('winner')
                            self.draw_board()
                            self.display_message("Player {} wins!".format(self.game.turn + 1))
                            pygame.display.update()
                            pygame.time.delay(2000)  # Delay for 2 seconds
                            pygame.quit()
                            sys.exit()
                        self.game.switch_turn()

            self.draw_board()
            pygame.display.update()

    def draw_board(self):
        for col in range(COLUMN_COUNT):
            for row in range(ROW_COUNT):
                pygame.draw.rect(self.screen, BLUE, (col * SQUARESIZE, (ROW_COUNT - row) * SQUARESIZE, SQUARESIZE, SQUARESIZE))
                pygame.draw.circle(self.screen, BLACK, (int(col * SQUARESIZE + SQUARESIZE / 2), int((ROW_COUNT - row) * SQUARESIZE + SQUARESIZE / 2)), RADIUS)

        for col in range(COLUMN_COUNT):
            for row in range(ROW_COUNT):
                if self.game.board[row][col] == 1:
                    pygame.draw.circle(self.screen, RED, (int(col * SQUARESIZE + SQUARESIZE / 2), self.height - int(row * SQUARESIZE + SQUARESIZE / 2)), RADIUS)
                elif self.game.board[row][col] == 2:
                    pygame.draw.circle(self.screen, YELLOW, (int(col * SQUARESIZE + SQUARESIZE / 2), self.height - int(row * SQUARESIZE + SQUARESIZE / 2)), RADIUS)

    def display_message(self, text):
        label = self.font.render(text, True, RED)
        self.screen.blit(label, (40, 10))

if __name__ == "__main__":
    pygame.init()
    game = ConnectFourGame()
    game.run()
